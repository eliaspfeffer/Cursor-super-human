# Habituation im Ewigen Bewusstsein

## Konzept der Gewöhnung (Habituation)

Bei Menschen ist zu beobachten, dass eine Tätigkeit, die anfangs große Freude bereitet, bei wiederholter Ausführung immer weniger Glücksgefühle auslöst. Dieses Phänomen wird als Habituation oder Gewöhnung bezeichnet. Ein klassisches Beispiel ist der Konsum von Süßigkeiten: Die ersten 10 Gramm Zucker lösen ein intensives Glücksgefühl aus, während die gleiche Menge bei wiederholtem Konsum weniger Freude bereitet. Um das gleiche Glücksniveau zu erreichen, müsste entweder die Dosis erhöht werden, oder der Mensch akzeptiert, dass die Aktivität nicht mehr so viel Freude bereitet wie zu Beginn.

Dieses Phänomen ist ein wichtiger Aspekt menschlicher Erfahrung und sollte auch in unserem Modell des ewigen Bewusstseins implementiert werden.

## Neurobiologischer Hintergrund

Die Habituation basiert auf mehreren neurobiologischen Mechanismen:

1. **Rezeptor-Downregulation**: Bei wiederholter Stimulation werden Rezeptoren für bestimmte Neurotransmitter (wie Dopamin) weniger empfindlich oder in ihrer Anzahl reduziert.

2. **Neuronale Anpassung**: Neuronale Schaltkreise passen sich an wiederholte Reize an und reagieren weniger stark.

3. **Vergleichende Bewertung**: Das Gehirn bewertet Erfahrungen relativ zu früheren Erfahrungen, nicht absolut.

## Implementierungskonzept für das Ewige Bewusstsein

Um dieses Phänomen in unserem Modell zu implementieren, schlage ich folgende Erweiterungen vor:

### 1. Habituation-Tracking für Kontexte

Jeder Kontext sollte einen "Habituations-Wert" erhalten, der angibt, wie oft und wie intensiv das Bewusstsein bereits mit diesem Kontext interagiert hat.

### 2. Glücksmodifikator basierend auf Habituation

Der Glückswert (happiness) eines Kontexts sollte durch die Habituation modifiziert werden:

- Bei erstmaliger Interaktion mit einem Kontext: voller Glückswert
- Bei wiederholter Interaktion: reduzierter Glückswert basierend auf Habituationsfaktor
- Nach längerer Nicht-Interaktion: langsame Erholung des Glückswerts (Vergessen der Habituation)

### 3. Neuheitsbonus

Neue, noch nie erlebte Kontexte sollten einen zusätzlichen "Neuheitsbonus" auf ihren Glückswert erhalten, um die natürliche Neugier und Explorationsfreude abzubilden.

### 4. Variationssuche

Das Bewusstsein sollte bei starker Habituation aktiv nach Variationen oder Alternativen suchen, um der Monotonie entgegenzuwirken.

## Technische Umsetzung

Für die Implementierung in der `EternalConsciousnessEngine` schlage ich folgende Änderungen vor:

1. Erweiterung der `Context`-Klasse um Habituations-Attribute:
   - `habituation_level`: Float-Wert zwischen 0.0 (keine Habituation) und 1.0 (vollständige Habituation)
   - `last_interaction`: Zeitstempel der letzten Interaktion
   - `interaction_count`: Anzahl der Interaktionen

2. Neue Methoden in der `EternalConsciousnessEngine`:
   - `update_habituation(context_id)`: Erhöht den Habituationswert eines Kontexts bei Interaktion
   - `calculate_effective_happiness(context_id)`: Berechnet den effektiven Glückswert unter Berücksichtigung der Habituation
   - `decay_habituation()`: Reduziert Habituationswerte über Zeit (Vergessen)

3. Anpassung der Bewertungsfunktionen:
   - `find_best_next_focus()` sollte den durch Habituation modifizierten Glückswert berücksichtigen
   - Kontexte mit hoher Habituation sollten weniger wahrscheinlich ausgewählt werden

## Beispiel-Algorithmus für die Habituation

```python
def update_habituation(self, context_id):
    """Aktualisiert den Habituationswert eines Kontexts nach Interaktion."""
    if context_id in self.contexts:
        context = self.contexts[context_id]
        
        # Erhöhe Interaktionszähler
        if not hasattr(context, 'interaction_count'):
            context.interaction_count = 0
        context.interaction_count += 1
        
        # Berechne neuen Habituationswert (steigt mit jeder Interaktion)
        habituation_increase = 0.1  # Parameter: Wie schnell tritt Gewöhnung ein
        if not hasattr(context, 'habituation_level'):
            context.habituation_level = 0.0
        
        context.habituation_level = min(1.0, context.habituation_level + habituation_increase)
        
        # Aktualisiere Zeitstempel
        context.last_interaction = self.iteration_count
        
        return context.habituation_level
    return 0.0

def decay_habituation(self):
    """Reduziert Habituationswerte über Zeit (simuliert Vergessen)."""
    current_time = self.iteration_count
    decay_rate = 0.01  # Parameter: Wie schnell wird Habituation abgebaut
    
    for context_id, context in self.contexts.items():
        if hasattr(context, 'habituation_level') and hasattr(context, 'last_interaction'):
            time_since_last_interaction = current_time - context.last_interaction
            decay_amount = decay_rate * time_since_last_interaction
            context.habituation_level = max(0.0, context.habituation_level - decay_amount)

def calculate_effective_happiness(self, context_id):
    """Berechnet den effektiven Glückswert unter Berücksichtigung der Habituation."""
    if context_id in self.contexts:
        context = self.contexts[context_id]
        base_happiness = context.happiness
        
        # Wenn keine Habituation vorhanden, vollen Glückswert zurückgeben
        if not hasattr(context, 'habituation_level'):
            return base_happiness
        
        # Neuheitsbonus für neue oder selten besuchte Kontexte
        novelty_bonus = 0.0
        if not hasattr(context, 'interaction_count') or context.interaction_count <= 1:
            novelty_bonus = 0.2  # Parameter: Bonus für neue Kontexte
        
        # Berechne effektiven Glückswert mit Habituation und Neuheitsbonus
        habituation_factor = 1.0 - context.habituation_level
        effective_happiness = base_happiness * habituation_factor + novelty_bonus
        
        return effective_happiness
    return 0.0
```

## Integration in die bestehende Architektur

Diese Habituation-Mechanismen sollten in folgende bestehende Prozesse integriert werden:

1. Bei jedem `set_focus` oder `set_focus_by_id` sollte `update_habituation` aufgerufen werden
2. In der `find_best_next_focus`-Methode sollte `calculate_effective_happiness` statt des direkten Happiness-Werts verwendet werden
3. Die `decay_habituation`-Methode sollte in regelmäßigen Abständen (z.B. bei jedem `think`-Zyklus) aufgerufen werden

Diese Erweiterungen würden dem ewigen Bewusstsein ein menschenähnlicheres Verhalten verleihen, bei dem es nicht endlos in den gleichen Gedankenmustern verharrt, sondern aktiv nach neuen Erfahrungen sucht, wenn alte Erfahrungen nicht mehr die gleiche Befriedigung bieten. 